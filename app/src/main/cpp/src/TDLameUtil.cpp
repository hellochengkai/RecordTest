/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <unistd.h>

/* Header for class com_demo_www_recordtest_TDLameUtil */

#ifdef __cplusplus
extern "C" {
#endif

#include "../include/lame.h"
#include "../include/jni_log.h"
#define FREEOBJ(obj) if(obj){free(obj); obj = NULL;}

JNIEXPORT jint JNICALL
Java_com_demo_www_recordtest_TDLameUtil_TDLameInit(
        JNIEnv *env, jobject instance, jint inSamplerate, jint inChannel, jint outSamplerate, jint outBitrate, jint quality) {
    lame_global_flags * lame = 0;
    lame = lame_init();
    lame_set_in_samplerate(lame, inSamplerate);
    lame_set_num_channels(lame, inChannel);
    //lame_set_out_samplerate(lame, outSamplerate);
    lame_set_brate(lame, outBitrate);
    lame_set_quality(lame, quality);
    id3tag_init(lame);
    id3tag_add_v2(lame);
    lame_init_params(lame);
    return (int)lame;
}

JNIEXPORT jint JNICALL
Java_com_demo_www_recordtest_TDLameUtil_TDLameEncodeMono(
        JNIEnv *env, jobject instance, jint lame,jshortArray buffer_l, jshortArray buffer_r,
        jint samples, jbyteArray mp3buf) {
    jshort* j_buffer_l = env->GetShortArrayElements(buffer_l, JNI_FALSE);

    jshort* j_buffer_r = env->GetShortArrayElements(buffer_r, JNI_FALSE);

    const jsize mp3buf_size = env->GetArrayLength(mp3buf);
    jbyte* j_mp3buf = env->GetByteArrayElements(mp3buf,JNI_FALSE);

    int result = lame_encode_buffer((lame_global_flags *)lame, j_buffer_l, j_buffer_r,
                                    samples, ( unsigned char*)j_mp3buf, mp3buf_size);

    env->ReleaseShortArrayElements(buffer_l, j_buffer_l, 0);
    env->ReleaseShortArrayElements(buffer_r, j_buffer_r, 0);
    env->ReleaseByteArrayElements(mp3buf, j_mp3buf, 0);

    return result;
}
JNIEXPORT jint JNICALL
Java_com_demo_www_recordtest_TDLameUtil_TDLameEncodeStereo(
        JNIEnv *env, jobject instance, jint lame,jshortArray buffer,
        jint samples, jbyteArray mp3buf) {
    jshort* j_buffer = env->GetShortArrayElements(buffer, JNI_FALSE);

    const jsize mp3buf_size = env->GetArrayLength(mp3buf);
    jbyte* j_mp3buf = env->GetByteArrayElements(mp3buf,JNI_FALSE);

    int result = lame_encode_buffer_interleaved((lame_global_flags *)lame,j_buffer,samples,( unsigned char*)j_mp3buf,mp3buf_size);

    env->ReleaseShortArrayElements(buffer, j_buffer, 0);
    env->ReleaseByteArrayElements(mp3buf, j_mp3buf, 0);

    return result;
}


JNIEXPORT jint JNICALL
Java_com_demo_www_recordtest_TDLameUtil_TDLameFlush(
        JNIEnv *env, jobject instance, jint lame,jbyteArray mp3buf) {
    const jsize mp3buf_size = env->GetArrayLength(mp3buf);
    jbyte* j_mp3buf = env->GetByteArrayElements(mp3buf, JNI_FALSE);
    int result = lame_encode_flush((lame_global_flags *)lame, ( unsigned char*)j_mp3buf, mp3buf_size);
    env->ReleaseByteArrayElements(mp3buf, j_mp3buf,0);
    return result;
}

JNIEXPORT void JNICALL
Java_com_demo_www_recordtest_TDLameUtil_TDLameClose
        (JNIEnv *env, jobject instance,jint lame) {
    lame_close((lame_global_flags *)lame);
}

JNIEXPORT jbyteArray JNICALL
Java_com_demo_www_recordtest_TDLameUtil_TDLameGetID3V1Buffer
        (JNIEnv *env, jobject instance,jint lame_int) {
    jbyteArray  jBtArray = NULL;
    char * buffer = NULL;
    int ret = 0;
    lame_t lame = (lame_t) lame_int;
    try{
        ret = lame_get_id3v1_tag(lame,NULL,0);
        LOGE("ret = %d",ret);
        if(ret>0){
            buffer = (char *) calloc(1, ret);
            if(!buffer){
                LOGE("malloc error");
                goto EXIT;
            }
            lame_get_id3v1_tag(lame, (unsigned char *) buffer, ret);
            LOGE("buffer %s",buffer);
        }
        if(ret <= 0){
            LOGE("ret is %d",ret);
            goto EXIT;
        }
        jBtArray = env->NewByteArray(ret);
        jbyte* btBuf = env->GetByteArrayElements(jBtArray, JNI_FALSE);
        if ( NULL != btBuf)
        {
            memcpy(btBuf, buffer, ret);
            env->ReleaseByteArrayElements(jBtArray, btBuf, 0);
        }
    }catch(...) {
        LOGE("CATCH error!!");
    }
    EXIT:
    FREEOBJ(buffer);
    return jBtArray;
}
JNIEXPORT jbyteArray JNICALL
Java_com_demo_www_recordtest_TDLameUtil_TDLameGetID3V2Buffer
        (JNIEnv *env, jobject instance,jint lame_int) {
    jbyteArray  jBtArray = NULL;
    char * buffer = NULL;
    int ret = 0;
    lame_t lame = (lame_t) lame_int;
    try{
        ret = lame_get_id3v2_tag(lame,NULL,0);
        LOGE("ret = %d",ret);
        if(ret>0){
            buffer = (char *) malloc(ret);
            if(!buffer){
                LOGE("malloc error");
                goto EXIT;
            }
            lame_get_id3v2_tag(lame, (unsigned char *) buffer, ret);
            LOGE("buffer %s",buffer);
        }
        if(ret <= 0){
            LOGE("ret is %d",ret);
            goto EXIT;
        }
        jBtArray = env->NewByteArray(ret);
        jbyte* btBuf = env->GetByteArrayElements(jBtArray, JNI_FALSE);
        if ( NULL != btBuf)
        {
            memcpy(btBuf, buffer, ret);
            env->ReleaseByteArrayElements(jBtArray, btBuf, 0);
        }
    }catch(...) {
        LOGE("CATCH error!!");
    }
    EXIT:
    FREEOBJ(buffer);
    return jBtArray;
}


#ifdef __cplusplus
}
#endif
